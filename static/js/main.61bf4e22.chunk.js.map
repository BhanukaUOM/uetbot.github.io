{"version":3,"sources":["store/configureStore.js","reducers/app.js","reducers/index.js","components/App.js","services/ServiceWorker.js","index.js"],"names":["middlewareEnhancers","initialState","fromJS","appReducer","createReducer","rootReducer","combineReducers","app","applyMiddleware","thunk","store","createStore","App","react_default","a","createElement","className","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","container","document","getElementById","Promise","resolve","ReactDOM","render","es","BrowserRouter","components_App","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6JAWIA,gICLAC,EAAsBC,iBAAO,IACpBC,EAAsBC,wBAAcH,EAAc,ICIhDI,EAJcC,0BAAgB,CAC3CC,IAAKJ,IFKLH,EAAsBQ,0BAAgBC,KAMxC,IAAMC,EAAeC,sBAAYN,EAAaL,2CGF/BY,mLAPX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAHHC,aCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,SAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3EjE,IAAMC,EAAyBC,SAASC,eAAe,QLG9CC,QAAQC,QAAQtC,GKAtBoB,KAAK,SAACpB,GACLuC,IAASC,OACPrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUzC,MAAOA,GACfG,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,QAGJT,KDNC,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,GAAwBnC,OAAOC,UAC3CmC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,OAAQ,WAC9B,IAAMhC,EAAK,GAAAiC,OAAMH,GAAN,sBAEPrC,GA6DV,SAAiCO,EAAOC,GAEtCiC,MAAMlC,GACHK,KAAK,SAAA8B,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrC,UAAUC,cAAcqC,MAAMnC,KAAK,SAAAC,GACjCA,EAAamC,aAAapC,KAAK,WAC7BV,OAAOC,SAAS8C,aAKpB3C,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEAjFA6B,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcqC,MAAMnC,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MCd7BE","file":"static/js/main.61bf4e22.chunk.js","sourcesContent":["// @flow\n\nimport type {Store, StoreEnhancer} from 'redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nimport {IS_PRODUCTION} from 'helpers/node';\nimport rootReducer from 'reducers';\n\nlet middlewareEnhancers: StoreEnhancer;\nif (IS_PRODUCTION) {\n  middlewareEnhancers = applyMiddleware(thunk);\n} else {\n  middlewareEnhancers = applyMiddleware(thunk, logger);\n  middlewareEnhancers = composeWithDevTools(middlewareEnhancers);\n}\n\nconst store: Store = createStore(rootReducer, middlewareEnhancers);\nexport const configureStore: Function = (): Promise<Store> => {\n  return Promise.resolve(store);\n};\n","// @flow\n\nimport {createReducer} from 'redux-create-reducer';\nimport type {Reducer} from 'redux-create-reducer';\nimport {fromJS, Map} from 'immutable';\n\nlet initialState: Map<> = fromJS({});\nexport const appReducer: Reducer = createReducer(initialState, {});\n","// @flow\n\nimport {combineReducers} from 'redux-immutable';\nimport type {Reducer} from 'redux-create-reducer';\n\nimport {appReducer} from 'reducers/app';\n\nconst rootReducer: Reducer = combineReducers({\n  app: appReducer,\n});\n\nexport default rootReducer;\n","// @flow\n\nimport React, {Component} from 'react';\n\ntype Props = {}\n\ntype State = {}\n\nclass App extends Component<Props, State> {\n  render() {\n    return (\n      <div className=\"app\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport type {Store} from 'redux';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\n// CSS\nimport '@coreui/coreui/dist/css/bootstrap.min.css';\nimport '@coreui/coreui/dist/css/coreui.min.css';\nimport '@coreui/icons/css/coreui-icons.min.css';\nimport 'styles/global.css';\n// Components and Services\nimport {configureStore} from 'store/configureStore';\nimport {IS_PRODUCTION} from 'helpers/node';\nimport App from 'components/App';\nimport * as serviceWorker from 'services/ServiceWorker';\n\nconst container: HTMLElement = document.getElementById('root');\n\nconfigureStore()\n  .then((store: Store) => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <Router>\n          <App/>\n        </Router>\n      </Provider>,\n      container\n    );\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nif (IS_PRODUCTION) {\n  serviceWorker.register();\n} else {\n  serviceWorker.unregister();\n}\n"],"sourceRoot":""}